/*
CREATE SCHEMA `atencion_accidentes`;
USE `atencion_accidentes`;

-- CREACIÓN DE LA TABLA DE DATOS PARA EL CSV
CREATE TABLE test_table (
  Numero VARCHAR(250),
  EDAD VARCHAR(250),
  SEXO VARCHAR(250),
  `TIPO DE VEHÍCULO` VARCHAR(250),
  `RELACION USUARIO/ACCIDENTE` VARCHAR(250),
  `FECHA DE ACCIDENTE` VARCHAR(250),
  `FECHA DE INGRESO IPS` VARCHAR(250),
  `HORA DE ACCIDENTE` VARCHAR(250),
  `HORA DE INGRESO IPS` VARCHAR(250),
  `FECHA DE ATENCION MÉDICA` VARCHAR(250),
  `HORA DE ATENCION MÉDICA` VARCHAR(250),
  `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` VARCHAR(250),
  `OPORTUNIDAD DE LA ATENCIÓN EN MINUTOS` VARCHAR(250),
  `REQUERIMIENTO DE CX` VARCHAR(250),
  `REFERIDO A OTRA IPS` VARCHAR(250),
  `REGIÓN ANATÓMICA MÁS AFECTADA` VARCHAR(250),
  POLITRAUMATISMO VARCHAR(250),
  `TIPO AFILIACIÓN` VARCHAR(250),
  `EPS USUARIO` VARCHAR(250),
  `CONDICION EGRESO` VARCHAR(250),
  `OPORTUNIDAD CITAS DE CONTROL` VARCHAR(250),
  COSTOS VARCHAR(250),
  MES VARCHAR(250),
  IPS VARCHAR(250),
  `GRUPO ETAREO` VARCHAR(250),
  `CURSO DE VIDA` VARCHAR(250),
  AÑO VARCHAR(250),
  `DIA SEMANA` VARCHAR(250),
  `Código Administradora` VARCHAR(250),
  Administradora VARCHAR(250),
  `Tipo Administradora` VARCHAR(250),
  `Codigo RIPS` VARCHAR(250),
  `Descripcion RIPS` VARCHAR(250)
);
*/
-- SE LEE EL ARCHIVO CSV: En datagrip se realiza por medio del importador de archivos.

-- CREACIÓN DE LAS TABLAS LIMPIAS

-- SE CREA LA TABLA DE TIPO ADMINISTRADORA
CREATE TABLE TIPO_ADMINISTRADORA (
  ID_TIPO_ADMINISTRADORA INT AUTO_INCREMENT PRIMARY KEY,
  TIPO_ADMISTRADORA VARCHAR(20)
);

-- SE CREA LA TABLA DE ADMINISTRADORAS
CREATE TABLE ADMINISTRADORAS (
  ID_ADMINISTRADORA VARCHAR(15) PRIMARY KEY,
  ID_TIPO_ADMINISTRADORA INT,
  NOMBRE_ADMINISTRADORA VARCHAR(150),
  CONSTRAINT ADM_FK_IDADM FOREIGN KEY (ID_TIPO_ADMINISTRADORA) REFERENCES TIPO_ADMINISTRADORA(ID_TIPO_ADMINISTRADORA)
);

-- SE CREA LA TABLA DE EPS
CREATE TABLE EPS (
  ID_EPS INT AUTO_INCREMENT PRIMARY KEY,
  ID_ADMINISTRADORA VARCHAR(15),
  NOMBRE_EPS VARCHAR(120),
  CONSTRAINT EPS_FK_IDADM FOREIGN KEY (ID_ADMINISTRADORA) REFERENCES ADMINISTRADORAS(ID_ADMINISTRADORA)
);

-- SE CREA LA TABLA DE GRUPOS ETAREOS
CREATE TABLE GRUPOS_ETAREOS (
  ID_GRUPO_ETAREO INT AUTO_INCREMENT PRIMARY KEY,
  CURSO_VIDA VARCHAR(30),
  RANGO_MIN INT,
  RANGO_MAX INT,
  CONSTRAINT GETA_CHK_RANGO CHECK (RANGO_MIN < RANGO_MAX),
  CONSTRAINT GETA_CHK_RANGO_MIN CHECK (RANGO_MIN >= 0),
  CONSTRAINT GETA_CHK_RANGO_MAX CHECK (RANGO_MAX >= 0)
);

-- SE CREA LA TABLA DE AFILIACIONES
CREATE TABLE AFILIACIONES (
  ID_AFILIACION INT AUTO_INCREMENT PRIMARY KEY,
  TIPO_AFILIACION VARCHAR(40)
);

-- SE CREA LA TABLA DE VEHICULOS
CREATE TABLE VEHICULOS (
  ID_VEHICULO INT AUTO_INCREMENT PRIMARY KEY,
  TIPO_VEHICULO VARCHAR(50)
);

-- SE CREA LA TABLA DE INFORMES DE ACCIDENTES
CREATE TABLE INFORMES_ACCIDENTES(
                                    ID_ACCIDENTE INT AUTO_INCREMENT PRIMARY KEY,
                                    ID_GRUPO_ETAREO INT,
                                    ID_EPS INT NULL,
                                    ID_AFILIACION INT NULL,
                                    ID_VEHICULO INT,
                                    GENERO VARCHAR(1),
                                    AÑO_NACIMIENTO INT,
                                    ACTOR_VIAL VARCHAR(2),
                                    FECHA_ACCIDENTE DATE,
                                    HORA_ACCIDENTE TIME,
                                    CONSTRAINT INF_FK_IDGETA FOREIGN KEY (ID_GRUPO_ETAREO) REFERENCES GRUPOS_ETAREOS(ID_GRUPO_ETAREO),
                                    CONSTRAINT INF_FK_IDEPS FOREIGN KEY (ID_EPS) REFERENCES EPS(ID_EPS),
                                    CONSTRAINT INF_FK_IDAFI FOREIGN KEY (ID_AFILIACION) REFERENCES AFILIACIONES(ID_AFILIACION),
                                    CONSTRAINT INF_FK_IDVEH FOREIGN KEY (ID_VEHICULO) REFERENCES VEHICULOS(ID_VEHICULO),
                                    CONSTRAINT INF_CHK_GENERO CHECK (GENERO IN ('M', 'F')),
                                    CONSTRAINT INF_CHK_ACTOR_VIAL CHECK (ACTOR_VIAL IN ('CI', 'CO', 'PA', 'PE', 'SI')),
                                    CONSTRAINT INF_CHK_AÑO CHECK (AÑO_NACIMIENTO >= 1900)
);

-- SE CREA LA TABLA DE IPS
CREATE TABLE IPS (
  ID_IPS INT AUTO_INCREMENT PRIMARY KEY,
  NOMBRE_IPS VARCHAR(50)
);

-- SE CREA LA TABLA DE REGISTRO INDIVIDUAL DE PRESTACION DE SERVICIOS DE SALUD
CREATE TABLE REGISTRO_INDIVIDUAL_PRESTACION_SERVICIOS_DE_SALUD(
  COD_RIPS VARCHAR(10) PRIMARY KEY,
  DESCRIPCION_RIPS VARCHAR(250)
);

-- SE CREA LA TABLA DE PROCEDIMIENTOS
CREATE TABLE PROCEDIMIENTOS(
  ID_PROCEDIMIENTO INT AUTO_INCREMENT PRIMARY KEY,
  COD_RIPS VARCHAR(10),
  REQUIERE_CX BOOLEAN,
  POLITRAUMATISMO BOOLEAN,
  CONSTRAINT PRO_FK_CRIPS FOREIGN KEY (COD_RIPS) REFERENCES REGISTRO_INDIVIDUAL_PRESTACION_SERVICIOS_DE_SALUD(COD_RIPS)
);

-- SE CREA LA TABLA DE ATENCIONES HOSPITALARIAS
CREATE TABLE ATENCIONES_HOSPITALARIAS(
ID_ATENCION INT AUTO_INCREMENT PRIMARY KEY,
  ID_ACCIDENTE INT,
  ID_IPS INT,
  ID_PROCEDIMIENTO INT,
  FECHA_INGRESO_IPS DATE,
  HORA_INGRESO_IPS TIME,
  FECHA_ATENCION_MEDICA DATE,
  HORA_ATENCION_MEDICA TIME,
  DURACION_ATENCION_HRS INT NULL,
  COSTO INT,
  CONDICION_EGRESO VARCHAR(1),
  TRIAGE VARCHAR(3),
  REFERIDO_OTRA_IPS BOOLEAN,
  CONSTRAINT ATE_FK_IDIPS FOREIGN KEY (ID_IPS) REFERENCES IPS(ID_IPS),
  CONSTRAINT ATE_FK_IDPRO FOREIGN KEY (ID_PROCEDIMIENTO) REFERENCES PROCEDIMIENTOS(ID_PROCEDIMIENTO),
  CONSTRAINT ATE_FK_IDACC FOREIGN KEY (ID_ACCIDENTE) REFERENCES INFORMES_ACCIDENTES(ID_ACCIDENTE),
  CONSTRAINT ATE_CHK_CONDICION_EGRESO CHECK (CONDICION_EGRESO IN ('V', 'M', 'S')),
  CONSTRAINT ATE_CHK_TRIAGE CHECK (TRIAGE IN ('I', 'II', 'III', 'IV', 'SI')),
  CONSTRAINT ATE_CHK_COSTO CHECK (COSTO >= 0),
  CONSTRAINT ATE_CHK_DURACION CHECK (DURACION_ATENCION_HRS >= 0),
  CONSTRAINT UNIQUE (ID_ACCIDENTE)
);

-- LIMPIEZA GENERAL DE ERRORES PROVENIENTES DEL CSV
UPDATE
    test_table
SET
    Numero = IF(Numero IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '0', Numero),
    EDAD = IF(EDAD IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '0', EDAD),
    SEXO = IF(SEXO IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION', SEXO),
    `TIPO DE VEHÍCULO` = IF(`TIPO DE VEHÍCULO` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
                            `TIPO DE VEHÍCULO`),
    `RELACION USUARIO/ACCIDENTE` = IF(`RELACION USUARIO/ACCIDENTE` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'),
                                      'SIN INFORMACION', `RELACION USUARIO/ACCIDENTE`),
    `FECHA DE ACCIDENTE` = IF(`FECHA DE ACCIDENTE` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '01-01-1900',
                              `FECHA DE ACCIDENTE`),
    `FECHA DE INGRESO IPS` = IF(`FECHA DE INGRESO IPS` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '01-01-1900',
                                `FECHA DE INGRESO IPS`),
    `HORA DE ACCIDENTE` = IF(`HORA DE ACCIDENTE` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '12:00:00 PM',
                             `HORA DE ACCIDENTE`),
    `HORA DE INGRESO IPS` = IF(`HORA DE INGRESO IPS` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '12:00:00 PM',
                               `HORA DE INGRESO IPS`),
    `FECHA DE ATENCION MÉDICA` = IF(`FECHA DE ATENCION MÉDICA` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'),
                                    '01-01-1900', `FECHA DE ATENCION MÉDICA`),
    `HORA DE ATENCION MÉDICA` = IF(`HORA DE ATENCION MÉDICA` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'),
                                   '12:00:00 PM', `HORA DE ATENCION MÉDICA`),
    `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` = IF(
            `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
            `OPORTUNIDAD DE LA ATENCIÓN EN HORAS`),
    `OPORTUNIDAD DE LA ATENCIÓN EN MINUTOS` = IF(
            `OPORTUNIDAD DE LA ATENCIÓN EN MINUTOS` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '0',
            `OPORTUNIDAD DE LA ATENCIÓN EN MINUTOS`),
    `REQUERIMIENTO DE CX` = IF(`REQUERIMIENTO DE CX` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '0',
                               `REQUERIMIENTO DE CX`),
    `REFERIDO A OTRA IPS` = IF(`REFERIDO A OTRA IPS` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '0',
                               `REFERIDO A OTRA IPS`),
    `REGIÓN ANATÓMICA MÁS AFECTADA` = IF(
            `REGIÓN ANATÓMICA MÁS AFECTADA` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
            `REGIÓN ANATÓMICA MÁS AFECTADA`),
    POLITRAUMATISMO = IF(POLITRAUMATISMO IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '0', POLITRAUMATISMO),
    `TIPO AFILIACIÓN` = IF(`TIPO AFILIACIÓN` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
                           `TIPO AFILIACIÓN`),
    `EPS USUARIO` = IF(`EPS USUARIO` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION', `EPS USUARIO`),
    `CONDICION EGRESO` = IF(`CONDICION EGRESO` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
                            `CONDICION EGRESO`),
    `OPORTUNIDAD CITAS DE CONTROL` = IF(`OPORTUNIDAD CITAS DE CONTROL` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'),
                                        '0', `OPORTUNIDAD CITAS DE CONTROL`),
    COSTOS = IF(COSTOS IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '0', COSTOS),
    MES = IF(MES IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '01. ENERO', MES),
    IPS = IF(IPS IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION', IPS),
    `GRUPO ETAREO` = IF(`GRUPO ETAREO` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
                        `GRUPO ETAREO`),
    `CURSO DE VIDA` = IF(`CURSO DE VIDA` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
                         `CURSO DE VIDA`),
    AÑO = IF(AÑO IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '1900', AÑO),
    `DIA SEMANA` = IF(`DIA SEMANA` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), '1. LUNES', `DIA SEMANA`),
    `Código Administradora` = IF(`Código Administradora` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'),
                                 'SIN INFORMACION', `Código Administradora`),
    Administradora = IF(Administradora IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
                        Administradora),
    `Tipo Administradora` = IF(`Tipo Administradora` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'),
                               'SIN INFORMACION', `Tipo Administradora`),
    `Codigo RIPS` = IF(`Codigo RIPS` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION', `Codigo RIPS`),
    `Descripcion RIPS` = IF(`Descripcion RIPS` IN ('#N/D', '#¡NUM!', 'ERROR: #N/A', '#¡VALOR!'), 'SIN INFORMACION',
                            `Descripcion RIPS`);


-- INSERCIÓN: TIPO_ADMINISTRADORA
INSERT INTO
  TIPO_ADMINISTRADORA (TIPO_ADMISTRADORA)
SELECT
  DISTINCT `Tipo Administradora`
FROM
  test_table;

-- INSERCIÓN: ADMINISTRADORAS
INSERT INTO ADMINISTRADORAS (ID_ADMINISTRADORA, ID_TIPO_ADMINISTRADORA, NOMBRE_ADMINISTRADORA)
SELECT `Código Administradora`, ID_TIPO_ADMINISTRADORA, NOMBRE_ADMINISTRADORA
FROM (
         SELECT IF(`Código Administradora` = 'SIN INFORMACION', 0, `Código Administradora`)                                                                                 AS `Código Administradora`,
             ID_TIPO_ADMINISTRADORA,
             NOMBRE_ADMINISTRADORA,
             ROW_NUMBER() OVER(PARTITION BY IF(`Código Administradora` = 'SIN INFORMACION', 0, `Código Administradora`) ORDER BY `Código Administradora`) AS rn
         FROM (
                  SELECT
                      `Código Administradora`,
                      TIPO_ADMINISTRADORA.ID_TIPO_ADMINISTRADORA,
                      test_table.Administradora AS NOMBRE_ADMINISTRADORA
                  FROM
                      test_table
                          JOIN
                      TIPO_ADMINISTRADORA ON test_table.`Tipo Administradora` = TIPO_ADMINISTRADORA.TIPO_ADMISTRADORA
                  WHERE
                      test_table.Administradora IS NOT NULL
              ) AS inner_temp
     ) AS outer_temp
WHERE rn = 1;

-- INSERCIÓN: EPS
UPDATE
  test_table
SET
  `EPS USUARIO` = REPLACE(test_table.`EPS USUARIO`, '.', '');

UPDATE
  test_table
SET
  `EPS USUARIO` = 'SIN INFORMACION'
WHERE
  `EPS USUARIO` IS NULL
  OR `EPS USUARIO` = '-'
  OR `EPS USUARIO` = 'NO TIENE'
  OR `EPS USUARIO` = 'XX XXX XX UNIONXXXXXXX NO UTILIZAR'
  OR `EPS USUARIO` = 'NO TIENE'
  OR `EPS USUARIO` = '804012088'
  OR `EPS USUARIO` = '-289192747'
  OR `EPS USUARIO` = 'Otro';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'NUEVA EPS'
WHERE
  `EPS USUARIO` like '%NUEVA%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'UNION TEMPORAL RED INTEGRADA FOSCAL-CUB'
WHERE
  `EPS USUARIO` LIKE '%FOSCAL%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'AMBUQ ESS EPSS'
WHERE
  `EPS USUARIO` LIKE '%AMBUQ%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'AXA COLPATRIA SEGUROS SA'
WHERE
  `EPS USUARIO` LIKE '%COLPATRIA SEGUROS%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'ASMET SALUD EPS SAS'
WHERE
  `EPS USUARIO` LIKE '%ASMET%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'COMPARTA EPS'
WHERE
  `EPS USUARIO` LIKE '%COMPARTA%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'COMPAÑIA SEGUROS BOLIVAR SA'
WHERE
  `EPS USUARIO` LIKE '%BOLIVAR%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'EPS SANITAS SA'
WHERE
  `EPS USUARIO` LIKE '%SANITAS%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'MEDIMAS EPS SAS'
WHERE
  `EPS USUARIO` LIKE '%MEDIMAS%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'SEGUROS DEL ESTADO SA'
WHERE
  `EPS USUARIO` LIKE '%ESTADO%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'COMPAÑIA MUNDIAL DE SEGUROS SA'
WHERE
  `EPS USUARIO` LIKE '%MUNDIAL%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'SALUD VIDA EPS'
WHERE
  `EPS USUARIO` LIKE '%SALUD VIDA%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'SALUD TOTAL EPS'
WHERE
  `EPS USUARIO` LIKE '%SALUD TOTAL%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'COOSALUD EPS'
WHERE
  `EPS USUARIO` LIKE '%COOSALUD%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'SURA EPS'
WHERE
  `EPS USUARIO` LIKE '%SURA%'
  AND `EPS USUARIO` LIKE '%EPS%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'SEGUROS DE VIDA SURAMERICANA SA'
WHERE
  `EPS USUARIO` LIKE '%SURA%'
  AND `EPS USUARIO` LIKE '%SEGURO%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'COOMEVA EPS'
WHERE
  `EPS USUARIO` LIKE '%COOMEVA%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'COMFAMILIAR'
WHERE
  `EPS USUARIO` LIKE '%COMFAMILIAR%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'ADMINISTRADORA DE LOS RECURSOS DE SISTEMA GENERAL DE SEGURIDAD SOCIAL EN SALUD'
WHERE
  `EPS USUARIO` LIKE '%ADMINISTRADORA DE LOS RECURSOS%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'CAFESALUD EPS'
WHERE
  `EPS USUARIO` LIKE '%CAFESALUD%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'CLINICA PIEDECUESTA'
WHERE
  `EPS USUARIO` LIKE '%CLINICA PIEDECUESTA%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'ECOOPSOS EPS'
WHERE
  `EPS USUARIO` LIKE '%ECOOPSOS%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'ECOPETROL'
WHERE
  `EPS USUARIO` LIKE '%ECOPETROL%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'FUNDACION OFTALMOLOGICA DE SANTANDER'
WHERE
  `EPS USUARIO` LIKE '%FUNDACION%'
  AND `EPS USUARIO` LIKE '%SANTANDER%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'LA EQUIDAD SEGUROS'
WHERE
  `EPS USUARIO` LIKE '%EQUIDAD%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'LA PREVISORA SA'
WHERE
  `EPS USUARIO` LIKE '%PREVISORA%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'MAPFRE SEGUROS'
WHERE
  `EPS USUARIO` LIKE '%MAPFRE%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'POLICIA NACIONAL'
WHERE
  `EPS USUARIO` LIKE '%POLICIA%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'SECRETARIA DE SALUD DE SANTANDER'
WHERE
  `EPS USUARIO` LIKE '%SECRETARIA%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'LIBERTY SEGUROS'
WHERE
  `EPS USUARIO` LIKE '%LIBERTY%';

UPDATE
  test_table
SET
  `EPS USUARIO` = 'SALUD VIDA EPS'
WHERE
  `EPS USUARIO` LIKE '%SALUD VIDA%'
  OR `EPS USUARIO` LIKE '%SALUDVIDA%';

ALTER TABLE
    EPS AUTO_INCREMENT = 1;

INSERT INTO
  EPS (ID_ADMINISTRADORA, NOMBRE_EPS)
SELECT
  DISTINCT ADMINISTRADORAS.ID_ADMINISTRADORA,
  test_table.`EPS USUARIO`
FROM
  test_table
  JOIN ADMINISTRADORAS ON test_table.Administradora = ADMINISTRADORAS.NOMBRE_ADMINISTRADORA
WHERE
    test_table.`EPS USUARIO` IS NOT NULL;


-- INSERCIÓN: GRUPOS_ETAREOS
UPDATE test_table
SET `GRUPO ETAREO` = 'SIN INFORMACION'
WHERE `GRUPO ETAREO` = '0';

UPDATE test_table
SET `CURSO DE VIDA` = 'SIN INFORMACION'
WHERE `CURSO DE VIDA` = '0';

ALTER TABLE
  GRUPOS_ETAREOS AUTO_INCREMENT = 1;

INSERT INTO
    GRUPOS_ETAREOS (CURSO_VIDA, RANGO_MIN, RANGO_MAX)
SELECT
    DISTINCT `CURSO DE VIDA`,
             CASE
                 WHEN `GRUPO ETAREO` = 'SIN INFORMACION' THEN NULL
                 WHEN `GRUPO ETAREO` = '60 y más' THEN 60
                 ELSE CAST(SUBSTRING_INDEX(`GRUPO ETAREO`, ' a ', 1) AS UNSIGNED)
                 END AS rango_minimo,
             CASE
                 WHEN `GRUPO ETAREO` = 'SIN INFORMACION' THEN NULL
                 WHEN `GRUPO ETAREO` = '60 y más' THEN 120
                 ELSE CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(`GRUPO ETAREO`, ' a ', -1), ' y', 1) AS UNSIGNED)
                 END AS rango_maximo
FROM
    test_table;


-- INSERCIÓN: AFILIACIONES
ALTER TABLE
    AFILIACIONES AUTO_INCREMENT = 1;

INSERT INTO
    AFILIACIONES (TIPO_AFILIACION)
SELECT
    DISTINCT `TIPO AFILIACIÓN`
FROM
    test_table;

-- INSERCIÓN: VEHICULOS
ALTER TABLE
    VEHICULOS AUTO_INCREMENT = 1;

INSERT INTO
    VEHICULOS (TIPO_VEHICULO)
SELECT
    DISTINCT `TIPO DE VEHÍCULO`
FROM
    test_table;

-- INSERCIÓN: IPS
ALTER TABLE
    IPS AUTO_INCREMENT = 1;

INSERT INTO
    IPS (NOMBRE_IPS)
SELECT
    DISTINCT IPS
FROM
    test_table;

-- INSERCIÓN: REGISTRO_INDIVIDUAL_PRESTACION_SERVICIOS_DE_SALUD

ALTER TABLE
    REGISTRO_INDIVIDUAL_PRESTACION_SERVICIOS_DE_SALUD AUTO_INCREMENT = 1;

INSERT INTO
    REGISTRO_INDIVIDUAL_PRESTACION_SERVICIOS_DE_SALUD (COD_RIPS, DESCRIPCION_RIPS)
SELECT
    DISTINCT `Codigo RIPS`,
             `Descripcion RIPS`
FROM
    test_table;

-- INSERCIÓN: PROCEDIMIENTOS
ALTER TABLE
    PROCEDIMIENTOS AUTO_INCREMENT = 1;

INSERT INTO PROCEDIMIENTOS (COD_RIPS, REQUIERE_CX, POLITRAUMATISMO)
SELECT `Codigo RIPS`,
       IF(`REQUERIMIENTO DE CX` = 'SI', 1, 0)             AS REQUIERE_CX,
       IF(POLITRAUMATISMO = 'SI', 1, 0) AS POLITRAUMATISMO
FROM (
         SELECT
             `Codigo RIPS`,
             `REQUERIMIENTO DE CX`,
             POLITRAUMATISMO,
             ROW_NUMBER() OVER(PARTITION BY `Codigo RIPS` ORDER BY (SELECT NULL)) AS rn
         FROM test_table
     ) AS temp
WHERE rn = 1;

-- INSERCIÓN: INFORMES_ACCIDENTES
ALTER TABLE
    INFORMES_ACCIDENTES AUTO_INCREMENT = 1;

UPDATE test_table
SET `HORA DE ACCIDENTE` = '12:00:00 p. m.'
WHERE `HORA DE ACCIDENTE` NOT REGEXP '^(1[0-2]|0?[1-9]):[0-5][0-9]:[0-5][0-9] (a\\. m\\.|p\\. m\\.)$';

UPDATE test_table
SET `HORA DE ACCIDENTE` = '12:00:00 p. m.'
WHERE `HORA DE ACCIDENTE` IS NULL;

UPDATE test_table
SET `HORA DE ACCIDENTE` = REPLACE(`HORA DE ACCIDENTE`, 'a. m.', 'AM');

UPDATE test_table
SET `HORA DE ACCIDENTE` = REPLACE(`HORA DE ACCIDENTE`, 'p. m.', 'PM');

UPDATE test_table
SET `FECHA DE ACCIDENTE` = DATE_FORMAT(STR_TO_DATE(`FECHA DE ACCIDENTE`, '%Y-%m-%dT%H:%i:%s.%f'), '%d/%m/%Y')
WHERE `FECHA DE ACCIDENTE` LIKE '____-__-__T%';

UPDATE test_table
SET Numero = CAST(Numero AS UNSIGNED);

INSERT INTO
    INFORMES_ACCIDENTES (
    ID_ACCIDENTE,
    ID_GRUPO_ETAREO,
    ID_EPS,
    ID_AFILIACION,
    ID_VEHICULO,
    GENERO,
    AÑO_NACIMIENTO,
    ACTOR_VIAL,
    FECHA_ACCIDENTE,
    HORA_ACCIDENTE
)
SELECT
    Numero,
    ID_GRUPO_ETAREO,
    ID_EPS,
    ID_AFILIACION,
    ID_VEHICULO,
    GENERO,
    ANIO_NACIMIENTO,
    ACTOR_VIAL,
    FECHA_ACCIDENTE,
    STR_TO_DATE(HORA_ACCIDENTE, '%h:%i:%s %p') AS HORA_ACCIDENTE
FROM (
         SELECT
             Numero,
             GE.ID_GRUPO_ETAREO,
             E.ID_EPS,
             A.ID_AFILIACION,
             V.ID_VEHICULO,
             CASE WHEN T.SEXO = 'MASCULINO' THEN 'M' WHEN T.SEXO = 'FEMENINO' THEN 'F' END AS GENERO,
             YEAR(CURDATE()) - CAST(COALESCE(T.EDAD, 0) AS UNSIGNED) AS ANIO_NACIMIENTO,
             CASE
                 WHEN T.`RELACION USUARIO/ACCIDENTE` = 'CICLISTA' THEN 'CI'
                 WHEN T.`RELACION USUARIO/ACCIDENTE` = 'CONDUCTOR' THEN 'CO'
                 WHEN T.`RELACION USUARIO/ACCIDENTE` = 'PASAJERO' THEN 'PA'
                 WHEN T.`RELACION USUARIO/ACCIDENTE` = 'PEATON' THEN 'PE'
                 ELSE 'SI'
                 END AS ACTOR_VIAL,
             COALESCE(STR_TO_DATE(T.`FECHA DE ACCIDENTE`, '%d/%m/%Y'), '1900-01-01') AS FECHA_ACCIDENTE,
             `HORA DE ACCIDENTE` AS HORA_ACCIDENTE,
             ROW_NUMBER() OVER (PARTITION BY Numero ORDER BY Numero) AS row_num
         FROM
             test_table T
                 JOIN GRUPOS_ETAREOS GE ON T.`CURSO DE VIDA` = GE.CURSO_VIDA
                 JOIN EPS E ON T.`EPS USUARIO` = E.NOMBRE_EPS
                 JOIN AFILIACIONES A ON T.`TIPO AFILIACIÓN` = A.TIPO_AFILIACION
                 JOIN VEHICULOS V ON T.`TIPO DE VEHÍCULO` = V.TIPO_VEHICULO
     ) AS numbered_rows
WHERE
    row_num = 1;

-- INSERCIÓN: ATENCIONES_HOSPITALARIAS
ALTER TABLE
    ATENCIONES_HOSPITALARIAS AUTO_INCREMENT = 1;
UPDATE test_table
SET `FECHA DE INGRESO IPS` = DATE_FORMAT(STR_TO_DATE(`FECHA DE INGRESO IPS`, '%Y-%m-%dT%H:%i:%s.%f'), '%d/%m/%Y')
WHERE `FECHA DE INGRESO IPS` LIKE '____-__-__T%';

UPDATE test_table
SET `FECHA DE INGRESO IPS` = '01/01/1900'
WHERE `FECHA DE INGRESO IPS` IS NULL;

UPDATE test_table
SET `FECHA DE INGRESO IPS` = STR_TO_DATE(`FECHA DE INGRESO IPS`, '%d/%m/%Y');

UPDATE test_table
SET `HORA DE INGRESO IPS` = STR_TO_DATE(REPLACE(test_table.`HORA DE INGRESO IPS`, 'a. m.', 'AM'), '%h:%i:%s %p')
WHERE test_table.`HORA DE INGRESO IPS` LIKE '%a. m.';

UPDATE test_table
SET `HORA DE INGRESO IPS` = REPLACE(test_table.`HORA DE INGRESO IPS`, 'p. m.', 'PM')
WHERE test_table.`HORA DE INGRESO IPS` LIKE '%p. m.';

UPDATE test_table
SET `HORA DE INGRESO IPS` = '12:00:00 PM'
WHERE test_table.`HORA DE INGRESO IPS` IS NULL;

UPDATE test_table
SET `HORA DE INGRESO IPS` = REPLACE(test_table.`HORA DE INGRESO IPS`, 'AM', ':00 AM')
WHERE test_table.`HORA DE INGRESO IPS` REGEXP '^[0-9]{1,2}:[0-9]{2}[AP]M$';

UPDATE test_table
SET `HORA DE INGRESO IPS` = REPLACE(test_table.`HORA DE INGRESO IPS`, 'PM', ':00 PM')
WHERE test_table.`HORA DE INGRESO IPS` REGEXP '^[0-9]{1,2}:[0-9]{2}[AP]M$';

UPDATE test_table
SET `HORA DE INGRESO IPS` = CONCAT(
        LPAD(SUBSTRING_INDEX(test_table.`HORA DE INGRESO IPS`, ':', 1) % 12, 2, '0'),
        ':',
        LPAD(SUBSTRING_INDEX(SUBSTRING_INDEX(test_table.`HORA DE INGRESO IPS`, ':', -1), ' ', 1), 2, '0'),
        ':00 ',
        IF(SUBSTRING_INDEX(test_table.`HORA DE INGRESO IPS`, ':', 1) < 12, 'AM', 'PM')
    )
WHERE test_table.`HORA DE INGRESO IPS` REGEXP '^[0-9]{1,2}: [0-9]{2}$';

UPDATE
    test_table
SET
    `HORA DE INGRESO IPS` = STR_TO_DATE(`HORA DE INGRESO IPS`, '%h:%i:%s %p')
WHERE
    `HORA DE INGRESO IPS` REGEXP '^[0-9]{1,2}:[0-9]{2}:[0-9]{2} (AM)$';

UPDATE
    test_table
SET
    `HORA DE INGRESO IPS` = REPLACE(`HORA DE INGRESO IPS`, ' PM', ':00')
WHERE
`HORA DE INGRESO IPS` REGEXP '^[0-9]{1,2}:[0-9]{2} PM$';

UPDATE
    test_table
SET
    `HORA DE INGRESO IPS` = TIME_FORMAT(STR_TO_DATE(`HORA DE INGRESO IPS`, '%Y-%m-%dT%H:%i:%s.%f'), '%H:%i:%s')
WHERE
    `HORA DE INGRESO IPS` LIKE '____-__-__T%';

UPDATE
    test_table
SET
    `HORA DE INGRESO IPS` = REPLACE(`HORA DE INGRESO IPS`, ' PM', '')
WHERE
    SUBSTRING_INDEX(`HORA DE INGRESO IPS`, ':', 1) > 12;


UPDATE
    test_table
SET `HORA DE INGRESO IPS` =
        IF(`HORA DE INGRESO IPS` = '00:00:00 PM', '12:00:00 PM', STR_TO_DATE(`HORA DE INGRESO IPS`, '%h:%i:%s %p'))
WHERE
    `HORA DE INGRESO IPS` LIKE '%PM';

UPDATE
    test_table
SET `HORA DE INGRESO IPS` = STR_TO_DATE(`HORA DE INGRESO IPS`, '%h:%i:%s %p')
WHERE `HORA DE INGRESO IPS` = '12:00:00 PM';

UPDATE test_table
SET `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` = 0
WHERE `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` IS NULL;

UPDATE test_table
SET `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` = 0
WHERE `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` LIKE 'SIN INFORMACION';

UPDATE test_table
SET `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` = REPLACE(test_table.`OPORTUNIDAD DE LA ATENCIÓN EN HORAS`, '-', '')
WHERE test_table.`OPORTUNIDAD DE LA ATENCIÓN EN HORAS` LIKE '-%';

UPDATE test_table
SET `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` = 0
WHERE test_table.`OPORTUNIDAD DE LA ATENCIÓN EN HORAS` LIKE '%T%';

UPDATE test_table
SET `HORA DE ATENCION MÉDICA` =
        CASE
            WHEN `HORA DE ATENCION MÉDICA` LIKE '%a. m.' THEN STR_TO_DATE(REPLACE(`HORA DE ATENCION MÉDICA`, 'a. m.', 'AM'), '%h:%i:%s %p')
            WHEN `HORA DE ATENCION MÉDICA` LIKE '%p. m.' THEN STR_TO_DATE(REPLACE(`HORA DE ATENCION MÉDICA`, 'p. m.', 'PM'), '%h:%i:%s %p')
            WHEN `HORA DE ATENCION MÉDICA` LIKE '____-__-__T__:%:%.___' THEN DATE_FORMAT(STR_TO_DATE(`HORA DE ATENCION MÉDICA`, '%Y-%m-%dT%H:%i:%s.%f'), '%H:%i:%s')
            WHEN `HORA DE ATENCION MÉDICA` LIKE '%AM' OR `HORA DE ATENCION MÉDICA` LIKE '%PM' THEN STR_TO_DATE(`HORA DE ATENCION MÉDICA`, '%h:%i:%s %p')
            ELSE '00:00:00'
            END;

UPDATE test_table
SET `FECHA DE ATENCION MÉDICA` =
        TIME_FORMAT(STR_TO_DATE(`FECHA DE ATENCION MÉDICA`, '%Y-%m-%dT%H:%i:%s.%f'), '%d/%m/%Y')
WHERE `FECHA DE ATENCION MÉDICA` LIKE '____-__-__T%';

UPDATE test_table
SET `FECHA DE ATENCION MÉDICA` = '01/01/1900'
WHERE `FECHA DE ATENCION MÉDICA` IS NULL;

UPDATE test_table
SET `FECHA DE ATENCION MÉDICA` =
        IF(`FECHA DE ATENCION MÉDICA` LIKE '00/00/0000', '01/01/1900', `FECHA DE ATENCION MÉDICA`);

UPDATE test_table
SET `FECHA DE ATENCION MÉDICA` = STR_TO_DATE(`FECHA DE ATENCION MÉDICA`, '%d/%m/%Y');


UPDATE
    test_table
SET `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` = REPLACE(`OPORTUNIDAD DE LA ATENCIÓN EN HORAS`, ',00' , '')
WHERE
    `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` LIKE '%,00';

UPDATE
    test_table
SET `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` = ROUND(CAST(REPLACE(`OPORTUNIDAD DE LA ATENCIÓN EN HORAS`, ',', '.') AS DECIMAL), 0);


UPDATE
    test_table
SET COSTOS = 0
WHERE COSTOS IS NULL
    OR COSTOS = '-';

INSERT INTO ATENCIONES_HOSPITALARIAS (
    ID_ACCIDENTE,
    ID_IPS,
    ID_PROCEDIMIENTO,
    FECHA_INGRESO_IPS,
    HORA_INGRESO_IPS,
    FECHA_ATENCION_MEDICA,
    HORA_ATENCION_MEDICA,
    DURACION_ATENCION_HRS,
    COSTO,
    CONDICION_EGRESO,
    TRIAGE,
    REFERIDO_OTRA_IPS
)
SELECT ID_ACCIDENTE,
        ID_IPS,
        ID_PROCEDIMIENTO,
       `FECHA DE INGRESO IPS`,
       `HORA DE INGRESO IPS`,
        `FECHA DE ATENCION MÉDICA`,
        `HORA DE ATENCION MÉDICA`,
        `OPORTUNIDAD DE LA ATENCIÓN EN HORAS` AS DURACION_ATENCION_HRS,
        COSTOS,
        CASE
            WHEN `CONDICION EGRESO` = 'VIVO' THEN 'V'
            WHEN `CONDICION EGRESO` = 'MUERTO' THEN 'M'
            ELSE 'S'
            END AS CONDICION_EGRESO,
        CASE
            WHEN `OPORTUNIDAD CITAS DE CONTROL` = 'I' THEN 'I'
            WHEN `OPORTUNIDAD CITAS DE CONTROL` = 'II' THEN 'II'
            WHEN `OPORTUNIDAD CITAS DE CONTROL` = 'III' THEN 'III'
            WHEN `OPORTUNIDAD CITAS DE CONTROL` = 'IV' THEN 'IV'
            ELSE 'SI'
            END AS TRIAGE,
       IF(`REFERIDO A OTRA IPS` = 'SI', 1, 0) AS REFERIDO_OTRA_IPS
    FROM test_table t
JOIN IPS i ON t.IPS = i.NOMBRE_IPS
JOIN PROCEDIMIENTOS p ON t.`Codigo RIPS` = p.COD_RIPS
JOIN INFORMES_ACCIDENTES ia ON t.Numero = ia.ID_ACCIDENTE;


-- TRIGGER: CALCULAR GRUPO ETAREO
CREATE TRIGGER TRIGGER_GRUPO_ETAREO BEFORE INSERT ON INFORMES_ACCIDENTES
    FOR EACH ROW
BEGIN
    DECLARE ANIO_NACIMIENTO INT;
    DECLARE EDAD INT;
    SELECT YEAR(CURDATE()) INTO ANIO_NACIMIENTO;
    SET EDAD = ANIO_NACIMIENTO - NEW.AÑO_NACIMIENTO;
    IF EDAD < 1 THEN
        SET NEW.ID_GRUPO_ETAREO = 1;
    ELSE
        SET NEW.ID_GRUPO_ETAREO = (SELECT ID_GRUPO_ETAREO FROM GRUPOS_ETAREOS WHERE RANGO_MIN <= EDAD AND RANGO_MAX >= EDAD);
    END IF;
END;


-- TRIGGER: VALIDAR FECHAS ATENCIONES HOSPITALARIAS
CREATE TRIGGER VALIDAR_FECHAS_ATENCIONES_HOSPITALARIAS BEFORE INSERT ON ATENCIONES_HOSPITALARIAS
    FOR EACH ROW
BEGIN
    IF NEW.FECHA_INGRESO_IPS > NEW.FECHA_ATENCION_MEDICA THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La fecha de ingreso a la IPS no puede ser posterior a la fecha de atención médica.';
END IF;
END;



-- TRIGGER: LOGS DE CAMBIOS EN INFORMES_ACCIDENTES
CREATE TABLE LOG_INFORMES_ACCIDENTES (
                                         ID_LOG INT AUTO_INCREMENT PRIMARY KEY,
                                         ID_ACCIDENTE INT,
                                         ACCION VARCHAR(10),
                                         FECHA_HORA TIMESTAMP
);

CREATE TRIGGER LOG_INSERT_INFORME_ACCIDENTE
    AFTER INSERT ON INFORMES_ACCIDENTES
    FOR EACH ROW
BEGIN
    INSERT INTO LOG_INFORMES_ACCIDENTES (ID_ACCIDENTE, ACCION, FECHA_HORA)
    VALUES (NEW.ID_ACCIDENTE, 'INSERT', NOW());
END;


CREATE TRIGGER LOG_UPDATE_INFORME_ACCIDENTE
    AFTER UPDATE ON INFORMES_ACCIDENTES
    FOR EACH ROW

BEGIN
    INSERT INTO LOG_INFORMES_ACCIDENTES (ID_ACCIDENTE, ACCION, FECHA_HORA)
    VALUES (NEW.ID_ACCIDENTE, 'UPDATE', NOW());
END;


CREATE TRIGGER LOG_DELETE_INFORME_ACCIDENTE
    AFTER DELETE ON INFORMES_ACCIDENTES
    FOR EACH ROW
BEGIN
    INSERT INTO LOG_INFORMES_ACCIDENTES (ID_ACCIDENTE, ACCION, FECHA_HORA)
    VALUES (OLD.ID_ACCIDENTE, 'DELETE', NOW());
END;

-- TRIGGER: LOGS DE CAMBIOS EN ATENCIONES_HOSPITALARIAS
CREATE TABLE LOG_ATENCIONES_HOSPITALARIAS (
                                              ID_LOG INT AUTO_INCREMENT PRIMARY KEY,
                                              ID_ATENCION INT,
                                              ACCION VARCHAR(10),
                                              FECHA_HORA TIMESTAMP
);

CREATE TRIGGER LOG_INSERT_ATENCION_HOSPITALARIA
    AFTER INSERT ON ATENCIONES_HOSPITALARIAS
    FOR EACH ROW

BEGIN
    INSERT INTO LOG_ATENCIONES_HOSPITALARIAS (ID_ATENCION, ACCION, FECHA_HORA)
    VALUES (NEW.ID_ATENCION, 'INSERT', NOW());
END;

CREATE TRIGGER LOG_UPDATE_ATENCION_HOSPITALARIA
    AFTER UPDATE ON ATENCIONES_HOSPITALARIAS
    FOR EACH ROW

BEGIN
    INSERT INTO LOG_ATENCIONES_HOSPITALARIAS (ID_ATENCION, ACCION, FECHA_HORA)
    VALUES (NEW.ID_ATENCION, 'UPDATE', NOW());
END;

CREATE TRIGGER LOG_DELETE_ATENCION_HOSPITALARIA
    AFTER DELETE ON ATENCIONES_HOSPITALARIAS
    FOR EACH ROW
BEGIN
    INSERT INTO LOG_ATENCIONES_HOSPITALARIAS (ID_ATENCION, ACCION, FECHA_HORA)
    VALUES (OLD.ID_ATENCION, 'DELETE', NOW());
END;

-- FUNCION: CONTAR ACCIDENTES POR MES
CREATE FUNCTION ContarAccidentesPorMes(p_ips_id INT, p_mes INT, p_año INT) RETURNS INT
    DETERMINISTIC
    READS SQL DATA
BEGIN
    DECLARE v_count_accidents INT;
    SELECT COUNT(*)
    INTO v_count_accidents
    FROM INFORMES_ACCIDENTES AS ia
             JOIN ATENCIONES_HOSPITALARIAS AS ah ON ia.ID_ACCIDENTE = ah.ID_ACCIDENTE
    WHERE ah.ID_IPS = p_ips_id
      AND MONTH(ia.FECHA_ACCIDENTE) = p_mes
      AND YEAR(ia.FECHA_ACCIDENTE) = p_año;
    RETURN v_count_accidents;
END;
SELECT ContarAccidentesPorMes(1, 1, 2021);

-- FUNCION: CALCULAR EDAD
CREATE FUNCTION CalcularEdad(p_año_nacimiento INT) RETURNS INT
    DETERMINISTIC
    READS SQL DATA
BEGIN
    DECLARE v_edad INT;
    SET v_edad = YEAR(CURDATE()) - p_año_nacimiento;
    RETURN v_edad;
END;
SELECT CalcularEdad(1990);

-- PROCEDIMIENTO: OBTENER COSTO TOTAL POR TIPO PROCEDIMIENTO
CREATE PROCEDURE ObtenerCostoTotalPorTipoProcedimiento(
    IN p_ips_id INT,
    OUT p_costo_total FLOAT
)
BEGIN
    DECLARE v_costo_total FLOAT;

    SELECT SUM(ah.COSTO)
    FROM ATENCIONES_HOSPITALARIAS AS ah
             JOIN PROCEDIMIENTOS AS p ON ah.ID_PROCEDIMIENTO = p.ID_PROCEDIMIENTO
    WHERE ah.ID_IPS = p_ips_id;

    SET p_costo_total = v_costo_total;
END;

-- PROCEDIMIENTO: REGISTRAR EPS
CREATE PROCEDURE RegistrarEPS(
    IN p_id_administradora VARCHAR(15),
    IN p_nombre_eps VARCHAR(120)
)
BEGIN
    DECLARE v_eps_id INT;

    INSERT INTO EPS (ID_ADMINISTRADORA, NOMBRE_EPS) VALUES (p_id_administradora, p_nombre_eps);

    SET v_eps_id = LAST_INSERT_ID();
END;

-- PROCEDIMIENTO: REGISTRAR ACCIDENTE Y ATENCIÓN
CREATE PROCEDURE RegistrarAccidenteYAtencion(
    IN p_eps_id INT,
    IN p_afiliacion_id INT,
    IN p_vehiculo_id INT,
    IN p_genero VARCHAR(1),
    IN p_año_nacimiento INT,
    IN p_actor_vial VARCHAR(2),
    IN p_fecha_accidente DATE,
    IN p_hora_accidente TIME,
    IN p_ips_id INT,
    IN p_procedimiento_id INT,
    IN p_fecha_ingreso_ips DATE,
    IN p_hora_ingreso_ips TIME,
    IN p_fecha_atencion_medica DATE,
    IN p_hora_atencion_medica TIME,
    IN p_duracion_atencion_hrs INT,
    IN p_costo FLOAT,
    IN p_condicion_egreso VARCHAR(1),
    IN p_triage VARCHAR(3),
    IN p_referido_otra_ips BOOLEAN
)
BEGIN
    DECLARE v_accidente_id INT;

    INSERT INTO INFORMES_ACCIDENTES (
        ID_EPS, ID_AFILIACION, ID_VEHICULO,
        GENERO, AÑO_NACIMIENTO, ACTOR_VIAL,
        FECHA_ACCIDENTE, HORA_ACCIDENTE
    ) VALUES (
                 p_eps_id, p_afiliacion_id, p_vehiculo_id,
                 p_genero, p_año_nacimiento, p_actor_vial,
                 p_fecha_accidente, p_hora_accidente
             );

    SET v_accidente_id = LAST_INSERT_ID();

    INSERT INTO ATENCIONES_HOSPITALARIAS (
        ID_ACCIDENTE, ID_IPS, ID_PROCEDIMIENTO,
        FECHA_INGRESO_IPS, HORA_INGRESO_IPS,
        FECHA_ATENCION_MEDICA, HORA_ATENCION_MEDICA,
        DURACION_ATENCION_HRS, COSTO,
        CONDICION_EGRESO, TRIAGE, REFERIDO_OTRA_IPS
    ) VALUES (
                 v_accidente_id, p_ips_id, p_procedimiento_id,
                 p_fecha_ingreso_ips, p_hora_ingreso_ips,
                 p_fecha_atencion_medica, p_hora_atencion_medica,
                 p_duracion_atencion_hrs, p_costo,
                 p_condicion_egreso, p_triage, p_referido_otra_ips
             );
END;

-- PROCEDIMIENTO: CANTIDAD DE ATENCIONES EN UN RANGO DE FECHAS
CREATE PROCEDURE cantidad_atenciones(IN p_fecha_inicio DATE, IN p_fecha_fin DATE)
BEGIN
    SELECT COUNT(ATH.ID_ATENCION) AS CANTIDAD_DE_ATENCIONES
    FROM ATENCIONES_HOSPITALARIAS ATH
    WHERE FECHA_ATENCION_MEDICA BETWEEN p_fecha_inicio AND p_fecha_fin;
END;

-- PROCEDIMIENTO: COSTO TOTAL DE LAS ATENCIONES POR MES EN UN AÑO ESPECIFICO
CREATE PROCEDURE costo_total_atenciones_por_mes(IN p_anio INT)
BEGIN
    SELECT
        MONTHNAME(FECHA_ATENCION_MEDICA) AS MES,
        CONCAT('$', FORMAT(SUM(COSTO), 0)) AS COSTO_TOTAL
    FROM
        ATENCIONES_HOSPITALARIAS ATH
            JOIN
        INFORMES_ACCIDENTES IA ON ATH.ID_ACCIDENTE = IA.ID_ACCIDENTE
    WHERE
        YEAR(FECHA_ATENCION_MEDICA) = p_anio
    GROUP BY MES;
END;

-- PROCEDIMIENTO: ATENCIONES POR CODIGO RIPS
CREATE PROCEDURE atenciones_por_codigo_rips(IN p_codigo_rips VARCHAR(20))
BEGIN
    SELECT *
    FROM ATENCIONES_HOSPITALARIAS ATH
    JOIN PROCEDIMIENTOS P ON ATH.ID_PROCEDIMIENTO = P.ID_PROCEDIMIENTO
    WHERE P.COD_RIPS = p_codigo_rips;
END;

-- PROCEDIMIENTO: ATENCIONES DADAS POR UNA IPS EN PARTICULAR
CREATE PROCEDURE atenciones_por_ips(IN p_nombre_ips VARCHAR(100))
BEGIN
    SELECT *
    FROM ATENCIONES_HOSPITALARIAS ATH
    JOIN IPS I ON ATH.ID_IPS = I.ID_IPS
    WHERE I.NOMBRE_IPS = nombre_ips;
END;

/*
 PROCEDIMIENTO: evidencia el costo promedio de un accidente de tránsito a las aseguradoras según
 el tipo de vehículo, relación conductor, curso de vida , sexo, mes de año y costo total, SIN USAR TEST_TABLE
 */
CREATE PROCEDURE costo_promedio_accidente()
BEGIN
    SELECT
        V.TIPO_VEHICULO,
        IA.ACTOR_VIAL,
        GE.CURSO_VIDA,
        IA.GENERO,
        MONTH(IA.FECHA_ACCIDENTE) AS MES,
        CONCAT('$', FORMAT(AVG(AH.COSTO), 0)) AS COSTO_PROMEDIO,
        CONCAT('$', FORMAT(SUM(AH.COSTO), 0)) AS COSTO_TOTAL
    FROM
        INFORMES_ACCIDENTES IA
            JOIN
        ATENCIONES_HOSPITALARIAS AH ON IA.ID_ACCIDENTE = AH.ID_ACCIDENTE
            JOIN
        VEHICULOS V ON IA.ID_VEHICULO = V.ID_VEHICULO
            JOIN
        GRUPOS_ETAREOS GE ON IA.ID_GRUPO_ETAREO = GE.ID_GRUPO_ETAREO
    GROUP BY V.TIPO_VEHICULO , IA.ACTOR_VIAL , GE.CURSO_VIDA , IA.GENERO , MES;
END;


/*
 PROCEDIMIENTO: evidencia el costo promedio de un accidente de tránsito a las aseguradoras según
 el tipo de vehículo
 */

CREATE PROCEDURE costo_promedio_accidente_por_vehiculo(in p_tipo_vehiculo VARCHAR(100))
BEGIN
    SELECT
        V.TIPO_VEHICULO,
        IA.ACTOR_VIAL,
        GE.CURSO_VIDA,
        IA.GENERO,
        MONTH(IA.FECHA_ACCIDENTE) AS MES,
        CONCAT('$', FORMAT(AVG(AH.COSTO), 0)) AS COSTO_PROMEDIO,
        CONCAT('$', FORMAT(SUM(AH.COSTO), 0)) AS COSTO_TOTAL
    FROM
        INFORMES_ACCIDENTES IA
            JOIN
        ATENCIONES_HOSPITALARIAS AH ON IA.ID_ACCIDENTE = AH.ID_ACCIDENTE
            JOIN
        VEHICULOS V ON IA.ID_VEHICULO = V.ID_VEHICULO
            JOIN
        GRUPOS_ETAREOS GE ON IA.ID_GRUPO_ETAREO = GE.ID_GRUPO_ETAREO
    WHERE V.TIPO_VEHICULO = p_tipo_vehiculo
    GROUP BY V.TIPO_VEHICULO , IA.ACTOR_VIAL , GE.CURSO_VIDA , IA.GENERO , MES;
END;

CALL ObtenerCostoTotalPorTipoProcedimiento(1, @p_costo_total);
SELECT @p_costo_total;

CALL RegistrarAccidenteYAtencion(1, 1, 1, 'M', 1990,
                                 'CO', '2021-01-01', '12:00:00', 1, 1,
                                 '2021-01-01','12:00:00', '2021-01-01', '12:00:00', 2,
                                 1000000,'V', 'I', 0);
CALL RegistrarEPS('FMS001', 'FUERZAS MILITARES DE SALUD PREMIUM');
CALL cantidad_atenciones('2018-01-01', '2018-02-01');
CALL costo_total_atenciones_por_mes(2018);
CALL atenciones_por_codigo_rips('S800');
-- CALL atenciones_por_ips('Clínica Los Comuneros');
-- CALL costo_promedio_accidente();
-- CALL costo_promedio_accidente_por_vehiculo('MOTO');

-- DROP TABLE IF EXISTS test_table;

